/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

run {
    standardInput = System.in  // Передать ввод с консоли напрямую
    jvmArgs '-Dfile.encoding=UTF-8'  // Исправить кодировку (если есть кракозябры)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    implementation 'com.google.code.gson:gson:2.12.1'
    // JLine для продвинутого ввода в консоли
    implementation 'org.jline:jline:3.21.0'
    implementation 'org.jline:jline-terminal-jansi:3.21.0'
    
    // Для цветного вывода (опционально)
    implementation 'org.fusesource.jansi:jansi:2.4.0'
    
    // Для ASCII-таблиц (опционально)
    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'org.slf4j:slf4j-api:2.0.12'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

tasks.withType(JavaExec) {
    jvmArgs '-Dfile.encoding=UTF-8'
}

tasks.withType(JavaExec) {
    systemProperty "file.encoding", "UTF-8"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.server.ServerRunner'
}


task runClient(type: JavaExec) {
    group = 'application'
    mainClass = 'org.client.ClientRunner'
    classpath = sourceSets.main.runtimeClasspath
}

task runServer(type: JavaExec) {
    group = 'application'
    mainClass = 'org.server.ServerRunner'
    classpath = sourceSets.main.runtimeClasspath
}