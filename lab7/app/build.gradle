/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    implementation 'com.google.code.gson:gson:2.12.1'
    // JLine для продвинутого ввода в консоли
    implementation 'org.jline:jline:3.30.0' // Обновите версию
    implementation 'org.jline:jline-terminal:3.30.0' // Добавлено
    implementation 'org.jline:jline-reader:3.30.0' // Добавлено
    implementation 'org.jline:jline-terminal-jansi:3.30.0' // Обновите версию

    // Для цветного вывода (опционально)
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    // Для ASCII-таблиц (опционально)
    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'org.slf4j:slf4j-api:2.0.12'

    implementation 'org.postgresql:postgresql:42.7.3'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.server.ServerRunner'
}

task runClient(type: JavaExec) {
    group = 'application'
    mainClass = 'org.client.ClientRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'org.gradle.console', 'plain'
    jvmArgs '-Dorg.gradle.console=plain'
}

task runServer(type: JavaExec) {
    group = 'application'
    mainClass = 'org.server.ServerRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'org.gradle.console', 'plain'
    jvmArgs '-Dorg.gradle.console=plain'
}


task serverShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('app')
    archiveClassifier.set('server-all')
    manifest {
        attributes 'Main-Class': 'org.server.ServerRunner'
    }
    // !!! ВАЖНО: Включаем сюда ваши скомпилированные классы !!!
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    mergeServiceFiles()
}

// ---

task clientShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('app')
    archiveClassifier.set('client-all')
    manifest {
        attributes 'Main-Class': 'org.client.ClientRunner'
    }
    // !!! ВАЖНО: Включаем сюда ваши скомпилированные классы !!!
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    mergeServiceFiles()
}

